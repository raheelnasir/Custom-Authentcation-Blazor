@page "/login"
@using BlazorApp1.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authstateprovider
@inject NavigationManager nav

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="Email" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>

        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
            <button @onclick="Move" class="btn btn-success">Register Now</button>

        </div>
    </div>
</div>


@code {

    public void Move()
    {
        nav.NavigateTo("/createuser", true);
    }
    public class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    public Model model = new Model();

    public async Task Authenticate()
    {
        var userAccount = await userAccountService.GetByUserName(model.UserName, model.Password);

        if (userAccount == null )
        {
            await js.InvokeVoidAsync("alert", userAccount);
            return;
        };
        var customÄuthStateProvider = (CustomAuthenticationStateProvider)authstateprovider;
        await customÄuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                name = userAccount
            }
        );

        nav.NavigateTo("/", true);
    }
}

